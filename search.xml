<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>制作不使用贴图的水滴特效</title>
      <link href="/2019/07/31/raindrop-effect/"/>
      <url>/2019/07/31/raindrop-effect/</url>
      
        <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/cover.png" alt="" title=""><p>在本文中，将会参考youtube上的一篇关于制作滴水特效的视频<a href="#ref">[1]</a>完整的制作一个滴水的玻璃板。当然同样的技术也可以运用到post-processing中。<br>基本的思路是将屏幕分割成小块，对于每一个小块绘制一格水滴，对它添加关于时间的偏移函数和抖动，然后再将模式复制到其他的格子中。通过加入随机性让水滴的生成时间和位置产生变化，从而模拟大量的水滴。</p><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><h2 id="抓取屏幕Texture"><a href="#抓取屏幕Texture" class="headerlink" title="抓取屏幕Texture"></a>抓取屏幕Texture</h2><p>对于玻璃板来说，我们需要知道玻璃后面的场景。在Unity中，可以方便的使用Unity提供的<code>GrabPass{“_GrabTexture”}</code> 来抓取当前framebuffer的内容，即绘制该物体之前，物体背后的场景。<br>其中具体使用还可以分为两种形式：<code>GrabPass{}</code>和<code>GrabPass{“TextureName”}</code> 后者将抓取屏幕内容并保存至一张texture里。每帧只为第一次使用这张纹理的物体做一次，当有多个物体使用GrabPass的话会更高效。<a href="#ref">[2]</a></p><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">struct v2f</div><div class="line">&#123;</div><div class="line">    float2 uv : TEXCOORD0;</div><div class="line">    float4 grabUv : TEXCOORD1;</div><div class="line">    float4 vertex : SV_POSITION;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">v2f vert (appdata v)</div><div class="line">&#123;</div><div class="line">    v2f o;</div><div class="line">    o.vertex = UnityObjectToClipPos(v.vertex);</div><div class="line">    o.grabUv = UNITY_PROJ_COORD(ComputeGrabScreenPos(o.vertex));</div><div class="line">    return o;</div><div class="line">&#125;</div><div class="line"></div><div class="line">sampler2D _GrabTexture;</div><div class="line"></div><div class="line">fixed4 frag (v2f i) : SV_Target</div><div class="line">&#123;</div><div class="line">    float2 projUv = i.grabUv.xy / i.grabUv.w;</div><div class="line">    float4 col = tex2D(_GrabTexture, projUv);</div><div class="line">    return col;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>值得注意的是，我们这里其实也可以用下面的形式得到抓取的图像。本质上它将projective divide封装在了一起，它在采样之前会自动将<code>grabUv.xyz</code>除以<code>grabUv.w</code><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float4 col = tex2Dproj(_GrabTexture, i.grabUv);</div></pre></td></tr></table></figure></p><p>但是由于后面我们会用到2d的投影坐标来采样其他的texture，所以我们需要手动先做一下投影变换。</p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/1.1_transparent_window.png" alt="" title="quad将背后的场景正确的绘制出来，就像透明的一样"><h2 id="绘制debug-uv"><a href="#绘制debug-uv" class="headerlink" title="绘制debug uv"></a>绘制debug uv</h2><p>我们通过一个uniform <code>_Size</code>来控制屏幕大小的tiling数量，为了方便后面的理解，我们先将uv绘制出来。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">float2 gridUv = frac(projUv * _Size);</div><div class="line">col.rg = gridUv;</div></pre></td></tr></table></figure></p><p>默认情况下，gridUv的起点(0, 0)会在左下角的顶点上,终点(1, 1)在右上角。但是为了能够在后面在中心的位置绘制水滴，所以我们需要将gridUv原点移到tile的中心，只要将gridUv - 0.5即可让gridUv的原点移动到(0.5, 0.5)。<br>由于水滴移动的范围是长条形的，通过将坐标x,y分别乘以一个不同的缩放系数，可以将每个tile从正方形变成长方形<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">float2 aspect = float2(<span class="number">2</span>, <span class="number">1</span>);</div><div class="line">float2 gridUv = frac(projUv * _Size * aspect) - <span class="number">0.5</span>;</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.3_move_to_center.png" alt="" title="右侧的是默认情况下，以左下角为原点的uv图，左侧是调整过，原点在tile中心的情况"> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.4_add_aspect.png" alt="" title="将方形的tile变成长条状"><h1 id="绘制水滴基本形"><a href="#绘制水滴基本形" class="headerlink" title="绘制水滴基本形"></a>绘制水滴基本形</h1><h2 id="第一个主水滴"><a href="#第一个主水滴" class="headerlink" title="第一个主水滴"></a>第一个主水滴</h2><p>为了方便观察，先画出每个tile的边界，其中水平方形留0.02的间隔，竖直方向上留0.01的间隔（间隔不一样是因为tile已经被压缩过了）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (gridUv.x &gt; <span class="number">.48</span> || gridUv.y &gt; <span class="number">.49</span>)</div><div class="line">    col = float4(<span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">1</span>);</div></pre></td></tr></table></figure></p><p>绘制点状的水滴思路也很简单，利用<a href="https://www.khronos.org/registry/OpenGL-Refpages/gl4/html/smoothstep.xhtml" target="_blank" rel="external">smoothstep函数</a>即可。smoothstep函数的原形为<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">smoothstep</span><span class="params">(<span class="keyword">float</span> a, <span class="keyword">float</span> b, <span class="keyword">float</span> x)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="keyword">float</span> t = saturate((x - a) / (b - a));</div><div class="line">    <span class="keyword">return</span> t * t * (<span class="number">3.0</span> - (<span class="number">2.0</span> * t));</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>它在这里的作用是在分界线处有一个平滑的效果，可以让水滴的边缘更自然一些。我们可以利用坐标点到原点的距离作为分割标准画出一个圆。</p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.5_center_drop.png" alt="" title="可以注意到我们的水滴圆也随着tile而被压缩"><p>为了解决水滴被压缩的问题，需要除以一个aspect来还原原始的形状（这个操作后面会被大量使用）<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> dropStrength = smoothstep(<span class="number">0.05</span>, <span class="number">0.03</span>, length(gridUv / aspect));</div><div class="line">col += dropStrength;</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.6_invert_center_drop.png" alt="" title="还原后的水滴"><h2 id="让水滴运动起来"><a href="#让水滴运动起来" class="headerlink" title="让水滴运动起来"></a>让水滴运动起来</h2><p>因为下雨的时候，我们经常可以看到水滴下来，所以我们想要做的第一件事就是能让水滴模拟流动的效果。最简单的想法是让水滴通过sin函数来模拟运动<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.7_dot_sine_move.gif" alt="" title="虽然和真实的水滴质感还差的很远，不过也是一个良好的开端"></p><p>有了第一步之后，我们就可以考虑更加真实的去模拟水滴的黏着感。通过将三角函数嵌套可以使函数曲线出现抖动，适合用来模拟水滴遇到的不同光滑程度的表面。这里我们嵌套了两层。另外通过一个因子d避免曲线出现大规模的抖动<br><code>F[x<em>, d</em>] := Sin[x + Sin[x + Sin[x] * d]]</code><br>我们希望水滴的运动分为两段运动，一段是快速的下滑，还有一段是向上归位（我们可以通过整体的移动grid来使水滴的世界位置不会出现向上滑动的情况）从下图可以看出，d = 0.5是一个比较理想的值，不会出现太多的抖动<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.8_uneven_move.png" alt="" title="这里的两个轴的比例被压缩过了，展示的只是基本形状"><br>因为我们不希望水滴移动到tile之外，所以我们要将原本在[-1, 1]的函数的幅度乘以一个0.5压缩到[-0.5, 0.5]<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.81_real_scale.png" alt="" title="最终函数的图示"></p><p>这里为了更直观的观察值的变化，可以通过染色表现y方向的偏移量<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.10_stick_pos_debug.gif" alt="" title="对于每一帧来说，红色的程度代表dropPos原点的位置向着下方偏移的程度"></p><p>同时，我们不希望出现水滴向上流的情况，所以我们要将整个grid向下移动。于是我们改写之前的代码<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">float2 gridUv = projUv * _Size * aspect;</div><div class="line">gridUv.y += t * <span class="number">0.26</span>;</div><div class="line">gridUv = frac(gridUv) - <span class="number">0.5</span>;</div><div class="line">col.rg = gridUv;</div><div class="line"></div><div class="line"><span class="keyword">float</span> x = <span class="number">0</span>;</div><div class="line"><span class="keyword">float</span> y = -<span class="built_in">sin</span>(t+<span class="built_in">sin</span>(t+<span class="built_in">sin</span>(t)*<span class="number">0.5</span>)) * <span class="number">.45</span>;</div><div class="line"></div><div class="line"><span class="keyword">float</span> dropStrength = smoothstep(<span class="number">0.05</span>, <span class="number">0.03</span>, length((gridUv - float2(x, y))  / aspect));</div><div class="line">col = dropStrength;</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/2.9_dot_stick_move.gif" alt="" title="效果图"><h2 id="残留轨迹的小水滴的绘制"><a href="#残留轨迹的小水滴的绘制" class="headerlink" title="残留轨迹的小水滴的绘制"></a>残留轨迹的小水滴的绘制</h2><p>思路其实和前面绘制主水滴的一样，只不过这次需要tiling到不同的位置<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> dropStrength = smoothstep(<span class="number">0.05</span>, <span class="number">0.03</span>, length(dropPos));</div><div class="line">float2 trailPos = (gridUv - float2(x, <span class="number">0</span>)) / aspect;</div><div class="line">trailPos.y = frac(trailPos.y * <span class="number">4</span>) / <span class="number">4</span>;</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/3.1_half_trail_dot.png" alt="" title="不过这样直接绘制出来的水滴会出现一半被截掉的情况"><p>之所以出现被截了一半的情况，是因为我们是在tile的边缘开始绘制水滴的中心的，所以我们需要偏移一小段位置<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trailPos.y = (frac(trailPos.y * <span class="number">4</span>) <span class="number">-0.6</span>) / <span class="number">4</span>;</div></pre></td></tr></table></figure></p><p>于是我们可以得到<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/3.2_full_trail.gif" alt="" title=""></p><p>因为我们不想让水滴残留也更随着tile移动，所以我们要补偿一个gridMovement<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float2 trailPos = (gridUv - float2(x, gridMovemnt)) / aspect;</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/3.3_full_still_trail.gif" alt="" title=""><p><span id="fadeout-trail"></span></p><h2 id="让水滴残留跟随主水滴"><a href="#让水滴残留跟随主水滴" class="headerlink" title="让水滴残留跟随主水滴"></a>让水滴残留跟随主水滴</h2><p>我们希望只有水滴下落方向上方的残留被看到，而下方的就不应该被看到，这样才能制造出一种残留水滴的感觉。我们希望主水滴下方的小水滴乘以一个0的mask系数，这样他们就不再显示。而上方的小水滴乘以一个1的mask系数，这样他们可以被显示。<br>这里获取对应位置mask值的方法就是判断dropPos的y分量，主水滴就是绘制在<code>dropPos.y == 0</code>的位置。dropPos是由gridUv的原点经过偏移产生的，所以一旦dropPos.y小于0，我们就知道当前位置处于主水滴下方。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trailStrength *= smoothstep(<span class="number">-.05</span>, <span class="number">.05</span>, dropPos.y);</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/3.4_masked_trail.gif" alt="" title=""><p>为了增加真实感，我们可以让远处的水滴残留渐渐消失，我们再叠加一个类似alpha的值过渡让小水滴从主水滴到tile的上边界渐隐即可<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">trailStrength *= smoothstep(<span class="number">0.5</span>, y, gridUv.y);</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/3.5_masked__fade_trail.gif" alt="" title=""><h1 id="水滴的扭曲坠落"><a href="#水滴的扭曲坠落" class="headerlink" title="水滴的扭曲坠落"></a>水滴的扭曲坠落</h1><h2 id="不规则的水滴"><a href="#不规则的水滴" class="headerlink" title="不规则的水滴"></a>不规则的水滴</h2><p>水滴因为重力原因，其实会形成一个椭球状，而不是标准的圆。所以我们可以通过二次函数<br><code>y -= (gridUv.x - x) * (gridUv.x - x);</code>来将水滴拉成一个类似包子的形状（中间保持不变，两边朝下拉），注意这个可以应用在整个tile上，我们后面会用到的一些折射或者fade也都会用到它</p><h2 id="不规则的下落路径"><a href="#不规则的下落路径" class="headerlink" title="不规则的下落路径"></a>不规则的下落路径</h2><p>目前水滴是直直的落下，可是仔细观察现实中的水滴，会发现水滴会不停的微调方向，其实是弯弯曲曲的坠落的。所以我们要让这个轨迹出现一些变化<br>我们可以通过函数<code>FDrop[x<em>, d</em>] := Sin[3x] * Power[Sin[x], d]</code>来实现，它的函数图像如下，一般来说4~6是个比较合适的d值<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/4.0_drop_wiggle.png" alt="" title="把它旋转90度看就会更像水滴的流向"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> wiggle = i.uv.y * <span class="number">10</span>;</div><div class="line"><span class="keyword">float</span> x = <span class="built_in">sin</span>(<span class="number">3</span> * wiggle) * <span class="built_in">pow</span>(<span class="built_in">sin</span>(wiggle), <span class="number">6</span>) * <span class="number">0.4</span>;</div><div class="line"><span class="keyword">float</span> y = -<span class="built_in">sin</span>(t + <span class="built_in">sin</span>(t + <span class="built_in">sin</span>(t) * <span class="number">0.5</span>)) * <span class="number">.45</span>;</div><div class="line">y -= (gridUv.x - x) * (gridUv.x - x);</div></pre></td></tr></table></figure><p>通过之前的<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Apply an offset to the original center</span></div><div class="line">float2 dropPos = (gridUv - float2(x, y)) / aspect;</div></pre></td></tr></table></figure></p><p>我们可以得到图像<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/4.1_wiggle_trail.gif" alt="" title=""></p><h2 id="加入随机性"><a href="#加入随机性" class="headerlink" title="加入随机性"></a>加入随机性</h2><p>目前为止，我们所有的水滴都是按照同样的速度，在同一时刻移动的，这看起来当然不符合现实中的真实情况。但是我们也准备使用贴图来做随机噪声，所以需要生成一些伪随机数来加入随机性。</p><p>第一步是将不同格子区分出来，我们要根据每个格子的不同坐标，指定一个unique id。方法就是<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float2 id = <span class="built_in">floor</span>(gridUv);</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/4.2_box_id.png" alt="" title=""><p>随机数的生成可以用下面的方法<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Return a pesudo random number between 0 and 1</span></div><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">RandGen</span><span class="params">(float2 p)</span> </span>&#123;</div><div class="line">    p = frac(p * float2(<span class="number">123.34</span>, <span class="number">345.45</span>));</div><div class="line">    p += dot(p, p + <span class="number">34.345</span>);</div><div class="line">    <span class="keyword">return</span> frac(p.x * p.y);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/4.3_randomize.png" alt="" title="我们还可以看下随机的效果"> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/4.4_randomized_tile.png" alt="" title="应用到不同格子后，就能产生一个不同的偏移量"><p>于是，对于每个格子，我们可以对t加一个偏移量<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> n = RandGen(id);</div><div class="line">t += n * PI * <span class="number">2</span>;</div><div class="line"><span class="keyword">float</span> wiggle = i.uv.y * <span class="number">10</span>;</div><div class="line"><span class="keyword">float</span> x = (n - <span class="number">0.5</span>) * <span class="number">0.8</span>;</div><div class="line">x += (<span class="number">.4</span> - <span class="built_in">abs</span>(x)) * <span class="built_in">sin</span>(<span class="number">3</span> * wiggle) * <span class="built_in">pow</span>(<span class="built_in">sin</span>(wiggle), <span class="number">6</span>) * <span class="number">0.4</span>;</div><div class="line"><span class="keyword">float</span> y = -<span class="built_in">sin</span>(t + <span class="built_in">sin</span>(t + <span class="built_in">sin</span>(t) * <span class="number">0.5</span>)) * <span class="number">.45</span>;</div><div class="line">y -= (gridUv.x - x) * (gridUv.x - x);</div></pre></td></tr></table></figure></p><p>当后面我们应用到dropPos的时候，就会产生不同程度的偏移<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/4.6_random_trail_vertical.gif" alt="" title="最终的效果类似于这样"></p><h1 id="水滴的“物理”特性"><a href="#水滴的“物理”特性" class="headerlink" title="水滴的“物理”特性"></a>水滴的“物理”特性</h1><h2 id="水雾"><a href="#水雾" class="headerlink" title="水雾"></a>水雾</h2><p>雨天如果在室内的话，其实还会在窗户上结一层水雾。这个水雾效果可以通过blur来做，这里的blur很费，有很大的优化空间和策略。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> <span class="keyword">float</span> numSamples = <span class="number">32</span>;</div><div class="line"><span class="keyword">float</span> angle = RandGen(i.uv) * <span class="number">2</span> * PI;</div><div class="line">blur *= <span class="number">.01</span>;</div><div class="line"><span class="keyword">for</span> (<span class="keyword">float</span> i = <span class="number">0</span>; i &lt; numSamples; i++) &#123;</div><div class="line">    float2 offs = float2(<span class="built_in">sin</span>(angle), <span class="built_in">cos</span>(angle));</div><div class="line">    <span class="keyword">float</span> d = frac(<span class="built_in">sin</span>((i + <span class="number">1</span>) * <span class="number">546.</span>) *<span class="number">5424.</span>);</div><div class="line">    d = <span class="built_in">sqrt</span>(d);</div><div class="line">    offs *= d;</div><div class="line">    col += tex2D(_GrabTexture, projUv + offs);</div><div class="line">    angle++;</div><div class="line">&#125;</div><div class="line">col /= numSamples;</div></pre></td></tr></table></figure></p><h2 id="增加水滴在水雾中的轨迹"><a href="#增加水滴在水雾中的轨迹" class="headerlink" title="增加水滴在水雾中的轨迹"></a>增加水滴在水雾中的轨迹</h2><p>我们经常能见到水流过水雾留下一条痕迹，这其实不会发生在室内的水雾中，不过为了美观，我们还是可以实现这个效果。在计算采样偏移的时候，我们需要乘以一个blur的系数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">float2 offs = float2(<span class="built_in">sin</span>(angle), <span class="built_in">cos</span>(angle)) * blur;</div></pre></td></tr></table></figure><p>这里的blur值就是我们需要设置的mask值</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">fogTrail = smoothstep(<span class="number">-.05</span>, <span class="number">.05</span>, dropPos.y);</div><div class="line">fogTrail *= smoothstep(<span class="number">0.5</span>, y, gridUv.y);</div></pre></td></tr></table></figure><p>正如<a href="#fadeout-trail">前面</a>曾经提到过的那样，其中第一步的操作是将主水滴下方的内容给剔除了，而第二步则是从每个tile自上而下的拉一个渐变。可视化之后会是下面的样子<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/5.1_fog_trail.png" alt="" title=""></p><p>当我们对水平坐标使用同样的操作的时候，我们可以将某一边的内容给抠除<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fogTrail *= smoothstep(<span class="number">-0.05</span>, <span class="number">0.05</span>, dropPos.x);</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/5.2_fog_left_cut.png" alt="" title=""><p>当使用<code>abs(dropPos.x)</code>就可以实现两边都抠除的效果<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/5.3_fog_both_cut.png" alt="" title=""></p><p>不过这样的话，mask值是反的，所以我们要再翻转一下水平方向的值。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fogTrail *= smoothstep(<span class="number">0.05</span>, <span class="number">0.02</span>, dropPos.x);</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/5.4_fog_inversed.gif" alt="" title="最后完整的效果"><h2 id="水滴的折射"><a href="#水滴的折射" class="headerlink" title="水滴的折射"></a>水滴的折射</h2><p>因为我们没有使用真正的法线，所以其实我们无法按照物理的方式去计算折射。不过我们可以伪造一个偏移值，这样就可以模拟出一种类似折射的效果。为了正确的显示折射，我们需要知道水滴的每个像素需要从哪里采样，我们前面的变量中，dropPos就是一个很好的来源<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/6.2_dropPos_to_distortion_direction.png" alt="" title="其中绿色分量越大，说明向y方向采样的偏移越多"><br>采样的距离就变成了偏移方向乘以偏移强度<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">float2 offs = dropStrength * dropPos + trailStrength * trailPos;</div><div class="line">col = tex2D(_MainTex, projUv + offs * _Distortion);</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/6.3_drop_distortion.png" alt="" title=""><p>后面我们会做blur，加上水雾被擦除的效果之后，我们就可以得到<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/7.2_blur.gif" alt="" title="完整的效果"></p><h1 id="加入不同的layer"><a href="#加入不同的layer" class="headerlink" title="加入不同的layer"></a>加入不同的layer</h1><p>我们可以将刚才的过程放入一个layer函数中，这样我们就可以在屏幕上叠加更多的层，从而增加了水滴的多样性，也提供了更好的扩展性。<br>另外我们还可以加一层static的layer，这样，我们就能模拟水滴溅在玻璃上形成的水滴<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function">float3 <span class="title">StaticDrops</span><span class="params">(float2 uv, <span class="keyword">float</span> t)</span> </span>&#123;</div><div class="line">    uv *= <span class="number">20</span>;</div><div class="line"></div><div class="line">    float2 id = <span class="built_in">floor</span>(uv);</div><div class="line">    uv = frac(uv) - <span class="number">0.5</span>;</div><div class="line">    float3 n = RandGen3(id.x * <span class="number">101.45</span> + id.y * <span class="number">43.654</span>);</div><div class="line">    float2 p = (n.xy - <span class="number">0.5</span>) * <span class="number">0.7</span>;</div><div class="line">    <span class="keyword">float</span> d = length(uv - p);</div><div class="line"></div><div class="line">    <span class="keyword">float</span> fade = smoothstep(<span class="number">0</span>, <span class="number">0.025</span>, frac(t * n.z)) * smoothstep(<span class="number">1</span>, <span class="number">0.025</span>, frac(t * n.z)) * frac(n.z);</div><div class="line">    <span class="keyword">float</span> c = smoothstep(<span class="number">0.3</span>, <span class="number">0.0</span>, d) * frac(n.z * <span class="number">10.</span>) * fade;</div><div class="line"></div><div class="line"></div><div class="line">    float2 aspect = float2(_Ratio, <span class="number">1</span>);</div><div class="line">    float2 gridUv = uv * _Size * aspect;</div><div class="line">    float2 dropPos = (gridUv - float2(</div><div class="line">        frac(n.y) * <span class="number">7</span>, </div><div class="line">        frac(n.y + <span class="built_in">floor</span>(t)) * <span class="number">3</span>)) / aspect;</div><div class="line">    <span class="keyword">float</span> dropStrength = smoothstep(<span class="number">0.5</span> * frac(n.x) + <span class="number">0.1</span>, <span class="number">0.1</span>, length(dropPos))* frac(n.z * <span class="number">10.</span>);</div><div class="line"></div><div class="line">    float2 offs = dropStrength * dropPos * fade;</div><div class="line">    <span class="keyword">return</span> float3(offs, <span class="number">0</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的代码不多解释了，其中fade控制水滴显隐的周期，有一种呼吸灯的效果。其他地方的思路和动态水滴层一样。<br>这里也要说一下，前面所有的代码可能过于冗长，指令数也可以化简，这些都可以根据实际情况调整，这里不再赘述。</p><h1 id="针对残留轨迹的改进"><a href="#针对残留轨迹的改进" class="headerlink" title="针对残留轨迹的改进"></a>针对残留轨迹的改进</h1><p>我们可以观察到，现实中的水滴其实会有一个比较长的延伸，所以我们希望残留的小水滴并不是仅仅是固定大小的，而是希望它有一种粘滞的感觉。<br>首先我们给每个小水滴一个固定的相位差，结果会是小水滴“跟随”大水滴移动。但是这样的移动比较死板<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.4_fixed_phase_difference.png" alt="" title="只是对基函数做一个固定相位的变化，由于加上了一个固定的初始值，最终的值的范围可能和基函数不一致"><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.4_even_phase_diff.gif" alt="" title="小水滴之间没有间隔变化"><br>一个想法是给每个小水滴一个相位差，判断当前主水滴与小水滴的位置，当距离比较近的时候，相位差比较少，而当距离比较大的时候，相位差比较大。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">d = <span class="number">0.5</span></div><div class="line">Manipulate[</div><div class="line">    Show[</div><div class="line">    Plot[F[x -Abs[F[x, d] - p], d] + p, &#123;x,<span class="number">-2</span> * Pi, <span class="number">2</span>*Pi&#125;, AspectRatio-&gt;Automatic, PlotRange -&gt; All, PlotStyle-&gt;&#123;Dashed,Red&#125;],</div><div class="line">    Plot[F[x,d], &#123;x,<span class="number">-2</span> * Pi, <span class="number">2</span>*Pi&#125;,  PlotRange -&gt; All,PlotStyle-&gt; Blue]], </div><div class="line">    &#123;p, <span class="number">-0.5</span>, <span class="number">0.5</span>&#125;</div><div class="line">]</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.5_dynamic_phase_difference.png" alt="" title="以p = 0，即每个tile中间的像素为例。可以看到在主水滴经过它，快速下落的时候，它会出现一个比较大的滞后"> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.5_edge_movement.png" alt="" title="p分别为-0.5, 0.5，即对应tile的上下边界。可以看到虽然边界处的偏移量也不尽相同，但是大致形状和基函数的一致"> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.5_uneven_phase_diff.gif" alt="" title="非均匀的小水滴间隔"><p>为了更好的理解这个过程，我们将y坐标[-0.5, 0.5]范围内，每0.1画一条函数曲线。相邻函数距离近，他们的亮度值也应该接近，而函数值的差别则体现在空间分布上。<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Manipulate[</div><div class="line">Show[</div><div class="line">Plot[Evaluate@Table[F[x -amp * Abs[F[x, d] - p], d] + p, &#123;p, <span class="number">-0.5</span>, <span class="number">0.5</span>, <span class="number">0.1</span>&#125;], &#123;x,<span class="number">-2</span> * Pi, <span class="number">2</span>*Pi&#125;,AspectRatio-&gt;Automatic, PlotRange -&gt;  All, PlotStyle-&gt;&#123;Dashed&#125;],</div><div class="line">Plot[F[x,d], &#123;x,<span class="number">-2</span> * Pi, <span class="number">2</span>*Pi&#125;,  PlotRange -&gt; All,PlotStyle-&gt; &#123;Blue, Thickness[<span class="number">0.002</span>]&#125;]</div><div class="line">]</div><div class="line">, &#123;amp, <span class="number">0.0</span>, <span class="number">4</span>&#125;]</div></pre></td></tr></table></figure></p><p>我们可以得到<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.6_contour_lines.png" alt="" title=""><br>这幅图中，在任意时刻（对于某个x），每条线之间的距离不同，如果曲线之间的间隔比较小，说明亮度比较集中，水滴较小，反之亦反。如果上下限差的比较多则说明当前tile的上下边界分割的比较远。<br>当乘以不同的偏移缩放系数的时候，我们可以看到不同程度的非均匀拉升<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.9_different_scale_stretch.png" alt="" title="可以看到当系数越小的时候，越接近均匀分布，而越大的时候，拉伸的规律就越不定。我们需要找到一个平衡的位置，可以让拉伸幅度尽可能长时间的存在"></p><p>如果我们把每个tile的边界画出来，会发现的伸缩规律，中间的水滴因为被非均匀的拉升了，所以会有拉扯的感觉<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.6_uneven_stretch.gif" alt="" title="非均匀的小水滴间隔"><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/raindrops/8.7_more_detailed_illustrate.png" alt="" title="这张图为高度线加了渐变，所以能更清楚的看到非均匀的拉扯"></p><p>后来我想出一种方法，<br>这样就给了水滴原始的方程加了一个非均匀的相位偏移</p><div align="center"><br><video width="100%" height="400" src="/videos/raindrops/raindrop_base_shape_move.mp4" controls="controls"> The`<video>` tag is not supported by your browser. </video><br>水滴背后的绘制过程<br></video></div><div align="center"><br><video width="100%" height="400" src="/videos/raindrops/9_test_video.mp4" controls="controls"> The`<video>` tag is not supported by your browser. </video><br>最终的效果4<br></video></div><p><span id="ref"></span></p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://www.youtube.com/watch?v=EBrAdahFtuo" target="_blank" rel="external">[1] Making a rainy window in Unity - Part 1</a><br><a href="https://docs.unity3d.com/Manual/SL-GrabPass.html" target="_blank" rel="external">[2] ShaderLab: GrabPass</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> graphics </tag>
            
            <tag> shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从像素之间谈起：像素游戏的画面增强（下）</title>
      <link href="/2017/07/03/from_pixel_to_screen_2/"/>
      <url>/2017/07/03/from_pixel_to_screen_2/</url>
      
        <content type="html"><![CDATA[<p>上篇见 <a href="/2017/07/02/from_pixel_to_screen_1/">从像素之间谈起：像素游戏的画面增强（上）</a></p><h1 id="其他可能的改进"><a href="#其他可能的改进" class="headerlink" title="其他可能的改进"></a>其他可能的改进</h1><h2 id="投影增强"><a href="#投影增强" class="headerlink" title="投影增强"></a>投影增强</h2><p>前面我们在进行扩散投影模拟的时候，是同时对周围八个点进行采样，但是事实上，有时为了控制投影的方向，可以只对一侧的点进行采样<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/sample_weight_partial.png" alt="" title=""><br><a id="more"></a><br>如图所示，只需要对右下角的五个格子采样，就可以模拟出左上角的光照。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/unilateral_sample.png" alt="" title=""><br>这样造成的效果是亮的部分会凸起，暗的部分会产生凹陷的效果<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/darkness_offset.png" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/lightness_offset.png" alt="" title=""></p><h2 id="函数的拟合"><a href="#函数的拟合" class="headerlink" title="函数的拟合"></a>函数的拟合</h2><p>前面在计算相邻点的加权颜色值时，用到了一个指数函数。指数函数的效果的确很好，考虑到在某些平台上exp的消耗可能有点大。另外，任意两个像素之间的欧几里得距离不会超过2.3个像素，所以我们尝试对函数进行一个拟合，如0.926+1.441x + 0.6578x^2 + 0.0417x^4<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/approx_1.jpg" alt="" title=""><br>其实我们还可以将把它化成1/(7x^2 +1)，效果也还可以，只是无论是哪种情况，在PC上测试差距并不明显（也有可能适得其反）<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/approx_2.png" alt="" title=""></p><h2 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a>扫描线</h2><p>考虑到有些游戏中，会出现一些因为曝光过度而无法显示扫描线的情况。于是，我们就需要对扫描线进行加强：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> limit = <span class="number">1</span> - step(<span class="number">257.0</span>, min(frac(i.pixel_no.x), <span class="number">1</span>- frac(i.pixel_no.y)) * _MainTex_TexelSize.z);</div><div class="line"><span class="keyword">float</span> bright = Luminance(out_color);</div><div class="line"><span class="keyword">return</span> fixed4(out_color *(<span class="number">1.8</span> - limit * bright * bright * <span class="number">0.89</span>), <span class="number">1.0</span>);</div></pre></td></tr></table></figure></p><p>但是对于某些偏暗的游戏，如果为了提高整体亮度，而扫描线同时也强化的很厉害，那么就会导致“碳化”<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/Overexposed.png" alt="" title="中间的白色由于亮度过高，在补偿的时候会显得非常暗"><br>虽然这样的扫描线加强在其他场合正是我们需要的，但在这里只会让画面变得很脏。关于这个问题并没有很好的解决方案，这需要根据不同游戏对参数做出调整。作为游戏开发，如果美术风格及早的确定，颜色的选择有所参照，将会对程序的优化有极大的帮助。而2D像素游戏由于很少受光照影响，再加上像素画本身也极其依赖于palette，所以如果palette控制的好，是可以根据其调试出一个很好的状态的。</p><p>由于目前只用针对一款游戏，所以上面的手工调整可以接受。如果我们需要大量的调整，我在想，可能还有一种思路是像tone mapping一样，将亮度映射在一个合理的区域内，这样既保留了细节又处理了边界状况。</p><h2 id="Tactics-Ogre的特殊处理"><a href="#Tactics-Ogre的特殊处理" class="headerlink" title="Tactics Ogre的特殊处理"></a>Tactics Ogre的特殊处理</h2><p>刚开始我为Taactic Ogre（中文译为：皇家骑士团）写shader的时候，出现了一个问题。由于很容易知道psp的分辨率是480*272，我就将其硬编码到shader中。但是却出现了一些意想不到的状况。在横坐标方向上，扫描线的分布不均匀。由于是周期性的，并且随着窗口的扩大问题更为严重，我最开始猜测是模拟器的精度出现了问题，我查了下changelog也的确提到了这个问题，只是我使用的版本应该已经修复了这个问题。另外，我测试了其他的游戏，发现一切都很正常，如果真的是精度问题，不该只出现在这一款游戏上。查看了整个render过程后发现Tactics Ogre中有些地方与其他游戏做的不同，比如<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/ToScreen5.png" alt="" title="注意纹理右侧的黑边"><br>Tactics Ogre在draw顶部的滚动文本时，并不会对其裁剪，而是放到了第二个color pass里才进行裁剪<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/psp_firstpass_cut.png" alt="" title=""><br>不过ppsspp模拟器提供了u_texelDelta这样一个uniform，我们可以利用它得知当前输入纹理的resolution：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">vec2 c_resolution = <span class="number">1.0f</span> / u_texelDelta;</div></pre></td></tr></table></figure></p><p>这样，即使在某些场景中，屏幕的分辨率发生变化，我们也能够保证显示正确的扫描线。<br><br></p><h1 id="最终PSP模拟器效果图"><a href="#最终PSP模拟器效果图" class="headerlink" title="最终PSP模拟器效果图"></a>最终PSP模拟器效果图</h1><p>在这里给出自己制作的在PSP模拟器上的最终效果，请放大后观察<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/zipped_To1.png" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/zipped_To2.jpg" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/zipped_To3.jpg" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/zipped_To4.jpg" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/zipped_To5.jpg" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/zipped_To6.jpg" alt="" title=""><br><br></p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>本文主要讨论了针对细像素游戏的画质增强，但是这并不意味着像素游戏的增强方式只有一种，相反，光是<a href="http://filthypants.blogspot.jp/2015/04/more-crt-shaders.html" target="_blank" rel="external">这里</a> 就提到多种后期特效。我们也无法说哪种效果比另一种更好。更多的时候，还是需要根据对游戏的定位来定制自己的后期特效，从而让画面为游戏核心服务。程序和美术之间的沟通是否充分也是能否有效的构建出成功的游戏画面中很重要的一个因素。</p><p>最后，你们觉得这是一篇讨论像素游戏中画面增强的文章吗？<br>不，不是的，我只是在安利Tactics Ogre :P</p><p>另：为防止图床炸裂，请勿随意转载:)</p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
            <tag> graphics </tag>
            
            <tag> shader </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从像素之间谈起：像素游戏的画面增强（上）</title>
      <link href="/2017/07/02/from_pixel_to_screen_1/"/>
      <url>/2017/07/02/from_pixel_to_screen_1/</url>
      
        <content type="html"><![CDATA[<p>由于文章太长，我将最初的文章拆成两个部分，下篇见 <a href="/2017/07/03/from_pixel_to_screen_2/">从像素之间谈起：像素游戏的画面增强（下）</a></p><h1 id="无所不在的像素画"><a href="#无所不在的像素画" class="headerlink" title="无所不在的像素画"></a>无所不在的像素画</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>随着分辨率的普遍提高，我们已经告别了依赖于简陋像素来表现游戏画面的年代。但还是有不少人像我一样沉迷于像素美术和游戏。如今到处可以都可以看到的各式像素作品，虽然大多被直接称呼为像素画，但实际上已经分化为很多分支，简单的将其归类为像素作品未免太含糊。在开始正文之前我先将他们粗粗的分个类。一些比较常见的代表如：</p><ol><li>大颗粒像素，此类像素作品一般细节较少，人物符号化或者抽象化。同时还可能出现非像素元素，如光晕，渐变 <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/large_scale_pixel.jpg" alt="" title="单键Bob，一个颇为爽快的flash游戏"><a id="more"></a></li><li><p>粒度较小的像素画，主要还是色块化，边缘并没有强化。 <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/dragon_den.gif" alt="" title="HGSS中的Dragon Den"></p></li><li><p>强化边缘和高光，细节丰富，但是普遍尺寸较小。 <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/small_scale_pixel.png" alt="" title="Drill Dozer截图"></p></li></ol><p>另外，在一些UI图标的绘制过程中，由于图标较小，也同样采用像素点绘的方式。因为它平时也不会被称为像素画，所以这里也不讨论。</p><p>其中第3种是我在本文中将着重讨论的。<br>这类像素图可能和平时所提到的像素图差的最远，因为它并不是为了做出像素化效果而诞生的。相反它是游戏机在分辨率和色板支持加强之后的产物（光是从GB到GBC，支持的色深就从2位变成了15位）。在这方面，任天堂算是是做到了极致（也可能因为任天堂的主机的屏幕天生小的缘故）这类像素画在抗锯齿（伪），光照，色彩的调和的方面很有特点（这篇文章中不细说）</p><h2 id="再现像素画"><a href="#再现像素画" class="headerlink" title="再现像素画"></a>再现像素画</h2><p>就GBA而言，分辨率为240 *160，但我们现在再制作像素的游戏时，玩家一定不会接受在这么小的一个屏幕上去玩游戏。一个是因为眼睛看的太累（长大后眼睛都变差了…）。另一方面，考虑到像素画的成本，也不建议针对一个1080p的屏幕进行逐像素绘画。为了满足一些玩家想要的像素的效果，一个最简单直接的方法就是将画面放大。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/small_scale_pixel_zoomed.png" alt="" title="这幅图放大了3倍之后，也许会更容易于将它认为是像素画风"></p><p>虽然这种方法省时省力，但是也会带来一个问题。在绘制像素画中的曲线时，由于一般不对线条使用反走样（会让画面变脏）来抗锯齿。在分辨率较低的时候，像素的边缘可以帮助人们识别且很难注意到异样，但当画面放大后，这些边缘就会显得粗糙不堪。这也是像素画风被一些人所诟病的原因。</p><p>为此，包括ppsspp在内的模拟器中，会内置不少shader来对图像进行后期处理。对于2D图像来说，具体方法包括xBRZ等滤镜来平滑放大图像（xBRZ对2D像素放大会产生平滑而舒适的效果，但是这会损失像素的特征），增加crt, 扫描线等后期特效将像素画做旧。当然，你也可以利用物理的手段将信号输出到CRT屏幕上，参考<a href="http://wavebeam.blogspot.jp/2016/01/a-beginners-guide-to-best-retro-gaming.html" target="_blank" rel="external">这里</a><br>另外，<a href="https://blz.la/rgb/gaming_crt.html" target="_blank" rel="external">这篇文章</a> 中讲述了一些crt效果的来源，也讨论了很多细节问题。一个简单的对比图： <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/metal_slug.jpg" alt="" title="from: http://www.neogaf.com/forum/showthread.php?p=236239524"><br>常见的效果如下<br><img src="http://i58.tinypic.com/2lnu2b9.png" alt="尝试翻墙显示" title="from: http://shmups.system11.org/viewtopic.php?f=6&t=51298&start=30" width="50%"><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/geom.jpg" alt="" title="注意屏幕的扭曲，这其实是crt的物理性质决定的"><br><img src="http://abload.de/img/royale0iu4f.png" alt="尝试翻墙显示" title="注意像素的膨胀" width="50%"></p><p>虽然实现方法不同，但总的来说都是在像素之间增加了隔断，人们的大脑会趋向为这种断裂解释理由，自动为图像进行内部平滑处理。这就和我们凑近屏幕看游戏画面但是不会觉得画面模糊的原因类似。另一方面，因为扫描线的存在，画面的层次感也可以体现出来，使得画面更加可信。甚至连Her Story中都为了剧情的需要用些crt效果。<br><a href="http://filthypants.blogspot.jp/2015/04/more-crt-shaders.html" target="_blank" rel="external">这篇文章</a>里介绍了大量的post processing shader，很有借鉴意义。<br><br></p><h1 id="一个shader的实现思路"><a href="#一个shader的实现思路" class="headerlink" title="一个shader的实现思路"></a>一个shader的实现思路</h1><p>本文的后期特效将主要适用于前面所述的第三种情况，也即通过临近采样的方式放大图像而达到加强像素化的目的。更多的模拟LCD屏幕而不是CRT屏幕，所以一些包括屏幕扭曲，通道分离的效果在本文中将不会涉及。本文会利用psp模拟器，将扫描线效果应用到Tactics Ogres（中文译为：皇家骑士团）上。<br>我主要从两方面完成对像素图的画面增强：1.利用微小的分割线来分隔开像素，让人们产生像素相连的错局。2.利用低通滤波器稍许的平滑像素边界（但是不宜平滑太多，不然会失去像素风格的特点）</p><p>为了统一，后面的演示代码都用CG来写，输入的纹理尺寸为512 x 384</p><h2 id="格子的分割"><a href="#格子的分割" class="headerlink" title="格子的分割"></a>格子的分割</h2><h3 id="硬分割"><a href="#硬分割" class="headerlink" title="硬分割"></a>硬分割</h3><p>首先，将像素放大了2倍之后，实际看到的一个“像素 pixel”（叫纹素 texel更为贴切）是2 x 2个像素。虽然我们想营造出的效果是让玩家觉得游戏的像素与像素之间产生了间距，但除了在原先的一个像素上通过勾画边缘来实现分割，我们并不能真的将像素之间创造出空格。这步操作之后，最小单位仍然是像素。下图所示的分别是每2个像素进行一次分割和每4个像素进行一次分割的图示。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/hard_separate_1.png" alt="" title="每两格有一个明暗变化周期"><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/hard_separate_2.png" alt="" title="每四格有一个明暗变化周期"><br>对于后期特效来说，输入的纹理为camera input，上图是1 texel对应 4 pixel，而下面是1 texel对应 16 pixel。<br>为了找到分割的位置，需要能够区分一个纹素所对应的像素。方法并不复杂, 若一个纹素拆分为4*4个像素，可以在顶点着色器上输出如下vec2：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">o.pixel_no = float2(o.uv.x * _MainTex_TexelSize.z, o.uv.y * _MainTex_TexelSize.w) * <span class="number">0.25</span>;</div></pre></td></tr></table></figure></p><p><code>_MainTex_TexelSize</code> 是内置uniform，记录输入纹理的相关信息，其中zw分量即为宽和高。对于ppsspp模拟器，可以通过 <code>u_texelDelta</code> 来计算屏幕的resolution，后面会提到。<br>有了pixel_no的信息，我们就可以在片段着色器里进行插值了：<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function">fixed4 <span class="title">Pass_Scanline</span><span class="params">(float2 uv)</span> </span>&#123;</div><div class="line">        <span class="keyword">float</span> column = <span class="number">4</span>;</div><div class="line">        float2 pixel_no = </div><div class="line">            frac(float2(uv.x * <span class="number">1024.0</span>, uv.y * <span class="number">768</span>) * _ScreenScale / column);</div><div class="line">        <span class="keyword">if</span>(pixel_no.x &lt; <span class="number">1</span> / column || pixel_no.y &lt; <span class="number">1</span> / column)</div><div class="line">            <span class="keyword">return</span> PREVIOUS_PASS(uv) * <span class="number">0.5</span>;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="keyword">return</span> PREVIOUS_PASS(uv);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中PREVIOUS_PASS是一个宏，用来嵌套伪multi-pass，这里的PREVIOUS_PASS可以简单的理解为上一个获取纹理的值的pass。这里当column为4的时候，一个纹素对应的四个像素的pixel_no的x分量分别为1/8, 3/8, 5/8, 7/8，我们可以利用这个信息来判断究竟哪个像素是这个纹素的边缘。<br>硬分割虽然完成了对像素的分割，但是效果比较生硬。玩家感受到的不是从屏幕上反映的图像，而更像是罩上了网格的图像。这也和asset store上的<a href="https://www.assetstore.unity3d.com/en/#!/content/73708" target="_blank" rel="external">这个效果</a>类似。</p><h3 id="丰富分割细节"><a href="#丰富分割细节" class="headerlink" title="丰富分割细节"></a>丰富分割细节</h3><p>硬分割的效果不理想，于是很自然的想到为这个边缘添加一些过渡效果是否会好一点呢？答案是肯定的。另外，为了能取得比较好的过渡效果，我们应该适当提高pixel对texel的比例，测试下来发现一般来说3比较合适，2的话太窄，而4的话，图像放大的过大。<br>为了理解方便，我们将图像的边缘定义为暗，图像的中央定义为亮，这样明暗间隔就能产生所谓的扫面线。问题演变为在一个纹素所对应的所有像素中，如何找到一个亮与暗的分布，从而表现出一个荧光格子的效果<br>如果单纯的亮度从中心开始，依照切比雪夫距离向边缘递减，效果其实不太理想，纹素与纹素之间割裂的依旧生硬<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/cos_sum_tween.png" alt="" title=""><br>所以我们想找到一种方式柔滑这一过程，首先可以尝试用高斯平滑来处理<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/gaussian_smooth.png" alt="" title="不过作用效果还是在一个纹素内，所以还是不够好"></p><p>卷积核<br>简单的过渡不够，所以需要找到一个卷积核（kernel）来将像素周围的情况考虑进去，最常见的低通滤波器就是高斯滤波器（Gaussian Filter）但直接使用的话，会造成画面均匀平滑。Themaister提供了一个很好的思路（虽然由于git目录失效，原始的代码已经不可考，但是我还是在网上找到了一个<a href="https://searchcode.com/codesearch/view/26809099/" target="_blank" rel="external">GLSL版本</a> ），效果如下图所示：<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/dotnbloombig.png" alt="" title="除了有些恼人的小黑边，但是总体效果非常接近我想要的最终效果"><br>他的思路简单概述起来就是，一组像素（如4x4）向所在纹素的相邻8个纹素取样，权重为该像素到纹素距离倒数的负相关。本质上是一个非对称的低通滤波器。它的优势在于，针对每个纹素内的像素，所采样的纹素是一致的（保留了像素的质感）而在纹素内部，利用非对称的卷积核实现亮度的变化。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/9pixel_neighbours.png" alt="" title="一个纹素被分为9个像素"><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/sample_weight.png" alt="" title="取左上角的像素进行演示，红色的线条的长度与权重成负相关"><br>我们知道越靠近中间，加权值越高，对于一个靠左下角的像素来说，将其卷积核画出来可能会像这样：<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/euclid_kernel_squared.jpg" alt="" title="权重为Exp(-2.05 * 平方欧氏距离)"><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/euclid_kernel.jpg" alt="" title="权重为Exp(-2.05 * 欧氏距离)"><br>之所以不选择平方欧氏距离，是因为这会造成加权之后，中间亮度区分不开来，而周围的亮度又太低，会有种硬分割的感觉。<br>在对周围的采样做了积分之后可以得到下图。虽然和前面的图很像，这张图的意义和刚才的并不一样，它代表的是一个纹素内的亮度分布（假设亮度的原始分布均匀）。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/low-pass_filtering.jpg" alt="" title=""><br>考虑到以上的操作局限在一个很小的范围内，所以我们可以将其离散化后观察<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/after_discretization.jpg" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/top_view_discretization.jpg" alt="" title="从顶部看会更直观"></p><h3 id="一些细节"><a href="#一些细节" class="headerlink" title="一些细节"></a>一些细节</h3><h4 id="滤波器的构成"><a href="#滤波器的构成" class="headerlink" title="滤波器的构成"></a>滤波器的构成</h4><p>Themaister的方法中，考虑了亮度对像素最终颜色的影响，这个滤波器由两个函数构成，一个是空间域上的滤波器系数，另一个是值域（亮度）上的系数。如果采样点上的亮度越亮，意味着它将会更多的侵蚀着其他的像素。有关Glow效果，可以参考<a href="http://www.gamasutra.com/view/feature/130520/realtime_glow.php" target="_blank" rel="external">这篇文章</a><br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">float</span> <span class="title">color_bloom</span><span class="params">(float3 color)</span></span></div><div class="line">&#123;</div><div class="line">    <span class="comment">// const float3 gray_coeff = float3(0.30, 0.59, 0.11);</span></div><div class="line">    <span class="keyword">const</span> <span class="keyword">float</span> shine = <span class="number">0.25</span>;</div><div class="line">    <span class="keyword">float</span> bright = Luminance(color);<span class="comment">//dot(color, gray_coeff);</span></div><div class="line">    <span class="keyword">return</span> lerp(<span class="number">1.0</span> + shine * <span class="number">0.5</span>, <span class="number">1.0</span> - shine, bright);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里我们除了可以自己定义gray_coeff以外，我们也可以使用unity中的内置函数，它对应的 <code>gray_coeff</code> 为fixed3(0.22, 0.707, 0.071)<br>另外，通过在lerp的时候增加一个系数，我将暗部的亮度稍微提高了下，弥补曝光不足的情况。</p><h4 id="No-的偏移"><a href="#No-的偏移" class="headerlink" title="No.的偏移"></a>No.的偏移</h4><p>刚才的卷积核只是一个理想状态的演示，实际上，由于任意两个纹素是相邻的，所以只能在一个纹素的两边（看成一个正方形）上进行边的绘制。否则，两个相邻纹素在交界处都绘上黑边会导致扫描线过粗。另外，如果直接采样，将会出现平顶的情况，也即是当边上为偶数个像素的时候，中间会出现高度一样的状况。于是需要对之前的pixel_no进行偏移，偏移之后将会打破原有的平衡，找到一个新的中心。这里的偏移值应该小于1/(column * 2)，否则循环周期将会出问题。<br><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">float</span> delta = dist(frac(pixel_no + float2(<span class="number">-0.125</span>, <span class="number">0.125</span>)), offset + float2(<span class="number">0.5</span>, <span class="number">0.5</span>));</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/before_offset.jpg" alt="" title=""> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/after_offset.jpg" alt="" title=""><p>通过对比可以看出，偏移之后，左侧和上侧的亮度明显变暗，亮度会表现的更集中在中间的一个点。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/different_subdivision_level.png" alt="" title="图所示为不同粒度下的表现"></p><h4 id="采样的偏移"><a href="#采样的偏移" class="headerlink" title="采样的偏移"></a>采样的偏移</h4><p>为了给物体增加一些投影，特别是文字，会对当前像素点的周围采样。我们并不是直接用相邻像素采样（相邻像素很有可能来自于同一纹素，所以采样没有意义），而是偏移一段距离，这和ps中的投影是一个原理。只是这里需要特别注意一个问题，也即是之前看到的一张图中出现的黑边问题。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/dotnbloombig.png" alt="" title="注意人物轮廓周围的小黑边"><br>这个问题的起因是：如果采样点之间始终距离为一个纹素的时，虽然能保证取到的都是周围的纹素，但当图像中文本的边界正好是处于格子的边缘（也就是亮度最低的位置）在经历一个周期后，亮度是最低的地方（周期性所致）就会对之前还在暗色边界范围内的像素采样，这样就会出现在一个白的背景上出现了一条黑边。<br>解决方法就是将采样偏移限制在纹素所包含的像素个数之内，虽然这意味着我们的投影无法超过一个纹素，但是起码会避免一些比较糟糕的情况。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/problem_of_blackline.png" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/problem_of_blackline_solved.png" alt="" title=""></p><h4 id="欧氏距离与曼哈顿距离的选择"><a href="#欧氏距离与曼哈顿距离的选择" class="headerlink" title="欧氏距离与曼哈顿距离的选择"></a>欧氏距离与曼哈顿距离的选择</h4><p>前面在谈到权重的时候，我们的图示标注出来的是欧几里得距离，那么如果为了将指令减少几条，变成曼哈顿距离如何呢？结果是：并不好<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/euclid_dist.jpg" alt="" title="可以看出，形成了一个明显的十字亮斑，并且高度差异并区分度不高"><br>另外值得一提的是，由于编译器和显卡的优化，使用曼哈顿距离并不能节省什么开销。<br><br></p><h2 id="增加bloom"><a href="#增加bloom" class="headerlink" title="增加bloom"></a>增加bloom</h2><p>Bloom能起到加光晕的效果，能进一步降低粗糙感。通常来说，bloom只是作为HDR的一环，过程还可以包括Tone Mapping、Bright Pass Filter以及Blur。但由于我们这里只考虑2D的情况，更多时候HDR可以由美术手工实现，所以我们先不讨论ToneMapping而简单实现Bright和Blur。</p><p>1    混合横向的bloom和纵向的bloom<br>比较常见的bloom中的blur过程分为两次，一次横向像素上的模糊，一次纵向像素上的模糊，两次叠加。但是我们为了省力，也可以在一个pass中进行，毕竟我们只是为了虚化边缘，制造投影的效果。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function">fixed4 <span class="title">Pass_SimpleBloom</span><span class="params">(float2 uv)</span></span></div><div class="line">&#123;</div><div class="line">    float4 sum = float4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    float4 bum = float4(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">    </div><div class="line">    float2 glareSize = float2(<span class="number">1.0</span> / <span class="number">512</span>, <span class="number">1.0</span> / <span class="number">384</span>) * <span class="number">0.65</span>;</div><div class="line"></div><div class="line">    <span class="keyword">int</span> height = <span class="number">3</span>;</div><div class="line">    <span class="keyword">int</span> width = <span class="number">1</span>;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = -width; i &lt; width; i++)</div><div class="line">    &#123;</div><div class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = -height; j &lt; height; ++j)</div><div class="line">        &#123;</div><div class="line">            sum += tex2D(_MainTex, uv + float2(i, j) * glareSize);</div><div class="line">            bum += tex2D(_MainTex, uv + float2(j, i) * glareSize);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    fixed4 color = PREVIOUS_PASS(uv);</div><div class="line">    color = (sum*sum*<span class="number">0.001</span> + bum*bum*<span class="number">0.0080</span>) * _Amount / ((<span class="number">2</span>* height +<span class="number">1</span>) *(<span class="number">2</span>* width +<span class="number">1</span>)) + color*_Power;</div><div class="line">    <span class="keyword">return</span> color;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="renderTexture与multipass"><a href="#renderTexture与multipass" class="headerlink" title="renderTexture与multipass"></a>renderTexture与multipass</h3><p>Bloom的操作我并没有在ppsspp模拟器中实施，主要原因是我不知道如何在ppsspp中实现真正的multi-pass shader，如果只是通过宏将pass折叠起来，由于bloom需要对周围采样，将会导致计算量指数式上涨。<br>但是这一切在unity中就很容易解决了，只需要在第一遍的pass中将bloom后的输出输出到render texture就可以被后面的shader所利用，两者加起来的时间测试下来大概只有single-pass的1/5，优化效果还是非常明显的。<br><figure class="highlight csharp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">RenderTexture rtTemp = RenderTexture.GetTemporary(src.width, src.height);</div><div class="line">Graphics.Blit(src, rtTemp, _Material_1);</div><div class="line">Graphics.Blit(rtTemp, dst, _Material_2);</div><div class="line">RenderTexture.ReleaseTemporary(rtTemp);</div></pre></td></tr></table></figure></p> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/performance_single.png" alt="" title="优化之前几乎所有的时间都耗在了最后一个drawIndexed上"> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/performance.png" alt="" title=""><p>可以看出分割出两个pass之后开销一下平衡很多。另外，unity中在利用RenderTexture.GetTemporary时，内部会调用<a href="https://docs.unity3d.com/ScriptReference/RenderTexture.DiscardContents.html" target="_blank" rel="external">DiscardContents</a> ，因而对CPU的效率也有所提升。详情可以参考<a href="https://docs.unity3d.com/ScriptReference/RenderTexture.GetTemporary.html" target="_blank" rel="external">官方文档</a>。<br>增加了bloom之后的效果图。<br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/3xScaled.png" alt="" title=""><br> <img src="https://imgs-1259535704.cos.ap-guangzhou.myqcloud.com/blog/crt/result.jpg" alt="" title=""><br><br></p>]]></content>
      
      
      <categories>
          
          <category> Dev </category>
          
      </categories>
      
      
        <tags>
            
            <tag> game </tag>
            
            <tag> graphics </tag>
            
            <tag> shader </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
